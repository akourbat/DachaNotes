@page "/"
@inherits ReactiveInjectableComponentBase<BookVM>

    <EditForm OnValidSubmit="SubmitFormAsync" Model="ViewModel">
        <FluentValidator Validator="ViewModel.Validator"></FluentValidator>

        <div class="form-group row mb-1">
            <label class="col-sm-3 col-form-label">Id=></label>
            <label class="col-sm-4 col-form-label">@ViewModel.Id</label>
        </div>

        <div class="form-group row mb-1">
            <label class="col-sm-3 col-form-label">Title</label>
            <div class="col-sm-4">
                <InputText Class="form-control" @bind-Value="ViewModel.Title" />
            </div>
            <div class="col-sm-5">
                <ValidationMessage For="@(() => ViewModel.Title)" />
            </div>
        </div>

        <div class="form-group row mb-5">
            <label class="col-sm-3 col-form-label">Name</label>
            <div class="col-sm-4">
                <InputNumber TValue="int" Class="form-control" @bind-Value="ViewModel.Price" />
            </div>
            <div class="col-sm-5">
                <ValidationMessage For="@(() => ViewModel.Price)" />
            </div>
        </div>

        <div class="form-group text-center col-sm-7 mb-5">
            <button type="submit" disabled="@ViewModel.FormInvalid" class="btn btn-primary">Register</button>
        </div>
        <ValidationSummary />
    </EditForm>
    <button @onclick="@(async () => await ViewModel.Submit.Execute())" disabled="@(ViewModel.Submit.CanExecute.Subscribe())">Test Submit</button>

    <hr />

    <div class="mt-2 mb-2">
        @if (ViewModel.Patch != null)
        {
            <ul>
                @foreach (var o in ViewModel.Patch.Operations)
                {
                    <li>Operation: @o.OperationType, Property: @o.path, Value: @o.value</li>
                }
            </ul>
        }
    </div>

    <h1>@VTitle</h1>
    <h3 class="mt-2">@_submitted</h3>

    @if (_response != null)
    {
        <label>@_response.Id</label>
        <label>@_response.Title</label>
        <label>@_response.Price</label>

    }
    else if (loadFailed)
    {
        <h1>Sorry, we could not load this book due to an error.</h1>
    }
    else if (ViewModel.IsExecuting)
    {
        <h1>Loading...</h1>
    }
    else { }
